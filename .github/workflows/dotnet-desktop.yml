name: Build and Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version number (leave empty for auto-increment)"
        required: false
        default: ""
      version_type:
        description: "Version increment type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  build-and-release:
    runs-on: windows-latest
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Get Previous Version
        id: get_previous_version
        shell: pwsh
        run: |
          $version = "1.0.0"
          $tags = git tag -l "v*"
          if ($tags) {
              $version = ($tags | Sort-Object -Descending)[0].TrimStart('v')
          }
          echo "PREV_VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Calculate New Version
        id: calc_version
        shell: pwsh
        run: |
          $version = "${{ github.event.inputs.version }}"
          if ([string]::IsNullOrEmpty($version)) {
              $prevVersion = "${{ env.PREV_VERSION }}"
              $major, $minor, $patch = $prevVersion.Split('.')
              
              switch ("${{ github.event.inputs.version_type }}") {
                  "major" { $version = "$([int]$major + 1).0.0" }
                  "minor" { $version = "$major.$([int]$minor + 1).0" }
                  "patch" { $version = "$major.$minor.$([int]$patch + 1)" }
              }
          }
          echo "NEW_VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Append
          
      - name: Update Project Version
        shell: pwsh
        run: |
          $version = "${{ env.NEW_VERSION }}"
          $projFile = "ValheimLauncher/ValheimLauncher.csproj"
          $xml = [xml](Get-Content $projFile)
          $propertyGroup = $xml.Project.PropertyGroup
          
          if (-not $propertyGroup.Version) {
              $versionElement = $xml.CreateElement("Version")
              $propertyGroup.AppendChild($versionElement)
          }
          $propertyGroup.Version = $version
          
          if (-not $propertyGroup.FileVersion) {
              $fileVersionElement = $xml.CreateElement("FileVersion")
              $propertyGroup.AppendChild($fileVersionElement)
          }
          $propertyGroup.FileVersion = $version
          
          if (-not $propertyGroup.AssemblyVersion) {
              $assemblyVersionElement = $xml.CreateElement("AssemblyVersion")
              $propertyGroup.AppendChild($assemblyVersionElement)
          }
          $propertyGroup.AssemblyVersion = $version
          
          $xml.Save($projFile)
          
      - name: Build
        run: |
          dotnet restore
          dotnet build --configuration Release --no-restore
          dotnet publish ValheimLauncher/ValheimLauncher.csproj -c Release -r win10-x64 --self-contained true -p:PublishSingleFile=true -o ./publish

      - name: Create Release Archive
        run: Compress-Archive -Path "./publish/*" -DestinationPath "ValheimLauncher.zip"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.NEW_VERSION }}
          name: Release v${{ env.NEW_VERSION }}
          files: ValheimLauncher.zip
          draft: false
          prerelease: false
